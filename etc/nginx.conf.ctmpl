daemon off;

events {}

http {
  gzip on;
  gzip_types application/javascript application/json text/css;
  include mime.types;
  server_tokens off;
  ssl_certificate /etc/ssl/private/cert;
  ssl_certificate_key /etc/ssl/private/key;

  map $http_upgrade $connection_upgrade {
    '' close;
    default upgrade;
  }

  server {
    listen 80 default_server;

    location /.wellknown/acme-challenge {
      root /etc/letsencrypt;
    }

    location / {
      return 302 https://$host$request_uri;
    }
  }

  server {
    listen 443 ssl default_server;
    server_name {{ env "CLIENT_SERVER_NAME" }};
    root /code/build/client;

    if ($request_uri = /index.html$is_args$args) {
      return 302 /#/$is_args$args;
    }

    location /ping {
      add_header Access-Control-Allow-Origin *;
      return 204;
    }

    location / {
      try_files $uri $uri/ @hash;
    }

    location @hash {
      return 302 /#$uri$is_args$args;
    }
  }

  {{ if env "CONSUL_SERVER_NAME" }}
    upstream consul {
      least_conn;
      {{ range service "consul" }}
        server {{.Address}}:{{.Port}};
      {{ else }}
        server localhost:65535;
      {{ end }}
    }

    server {
      listen 443 ssl;
      server_name {{ env "CONSUL_SERVER_NAME" }};

      location / {
        auth_basic "Restricted";
        auth_basic_user_file /usr/local/nginx/conf/consul_auth_basic_user_file;
        proxy_pass http://consul;
      }
    }
  {{ end }}

  {{ if env "LIVERELOAD_SERVER_NAME" }}
    upstream livereload {
      least_conn;
      {{ range service "livereload" }}
        server {{.Address}}:{{.Port}};
      {{ else }}
        server localhost:65535;
      {{ end }}
    }

    server {
      listen 443 ssl;
      server_name {{ env "LIVERELOAD_SERVER_NAME" }};

      location / {
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_pass http://livereload;
      }
    }
  {{ end }}

  {{ if env "SIGNAL_SERVER_NAME" }}
    upstream signal {
      least_conn;
      {{ range service "signal" }}
        server {{.Address}}:{{.Port}};
      {{ else }}
        server localhost:65535;
      {{ end }}
    }

    server {
      listen 443 ssl;
      server_name {{ env "SIGNAL_SERVER_NAME" }};

      location / {
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_pass http://signal;
      }
    }
  {{ end }}
}
